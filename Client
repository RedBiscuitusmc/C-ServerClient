using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class ClientRunner
{
    private Socket clientSocket;
    public ClientRunner()
    {
        // Initialize the clientSocket here
        clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    }
    public async Task RunClientAsync()
    {
        int portNum = 3000;
        //string ipAddress = "169.254.114.198";// premade for the satcore connection 
        string ipAddress = "127.0.0.1"; // Use localhost or the server's IP address

        Console.WriteLine("Standby program is launching ...");

        IPHostEntry ipEntry = await GetHostEntryAsync(ipAddress);
        DisplayIPAddress(ipEntry, ipAddress);

        await Task.Delay(1000);

        IPAddress ip = ipEntry.AddressList[0];
        IPEndPoint iPEndPoint = CreateIPEndPoint(ip, portNum);
        await Task.Delay(1000);
        using Socket client = CreateClientSocket(iPEndPoint);
        Console.WriteLine("Building a new socket type standby");
        await Task.Delay(1000);

        try
        {
            await ConnectToServerAsync(client, iPEndPoint);
            Console.WriteLine("Waiting for the server to accept the connection...");
            while (!client.Connected)
            {
                await Task.Delay(100); // Adjust the delay as needed
            }
            Console.WriteLine("Server accepted the connection!");

            if (client.Connected)
            {
                Console.WriteLine("Connected to the server!");

                //// Send a message to the server
                //string messageToSend = "Hello, Server!";
                //byte[] buffer = Encoding.UTF8.GetBytes(messageToSend);
                //await client.SendAsync(new ArraySegment<byte>(buffer), SocketFlags.None);

                //Console.WriteLine("Client sent message to server.");
            }
        }
        catch (Exception ex)
        {
            HandleConnectionError(ex);
        }

        await DelayForSocketResetAsync(client);
        Console.WriteLine("Socket has been reset");
    }

    public async Task SendConnectionStatusToServer()
    {
        if (clientSocket.Connected)
        {
            Console.WriteLine("Connected to the server!");

            // Send a status message to the server
            string statusMessage = "Client Connected";
            byte[] buffer = Encoding.UTF8.GetBytes(statusMessage);
            await clientSocket.SendAsync(new ArraySegment<byte>(buffer), SocketFlags.None);

            Console.WriteLine("Client sent status to server.");
        }
        else
        {
            Console.WriteLine("Client is not connected to the server.");
        }
    }

    public async Task SendStatusMessageAsync(string message)
    {
        byte[] messageBuffer = Encoding.UTF8.GetBytes(message);
        await clientSocket.SendAsync(new ArraySegment<byte>(messageBuffer), SocketFlags.None);
    }

    private async Task<IPHostEntry> GetHostEntryAsync(string ipAddress)
    {
        return await Dns.GetHostEntryAsync(ipAddress);
    }

    private void DisplayIPAddress(IPHostEntry ipEntry, string ipAddress)
    {
        Console.WriteLine($"We just assigned the IP Address. IP Address: {ipEntry}");
    }

    private IPEndPoint CreateIPEndPoint(IPAddress ip, int portNum)
    {
        Console.WriteLine($"Passing Combined IP and Port Number: IP Address: {ip}, Port Number: {portNum}");
        return new IPEndPoint(ip, portNum);
    }

    private Socket CreateClientSocket(IPEndPoint iPEndPoint)
    {
        return new Socket(iPEndPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
    }

    private async Task ConnectToServerAsync(Socket client, IPEndPoint remoteEP)
    {
        if (remoteEP != null)
        {
            try
            {
                await client.ConnectAsync(remoteEP);
            }
            catch (Exception ex)
            {
                HandleConnectionError(ex);
            }
        }
        else
        {
            Console.WriteLine("Error: RemoteEndPoint is null.");
        }
    }

    private void HandleConnectionError(Exception ex)
    {
        Console.WriteLine($"Error connecting to the server: {ex.Message}");
    }

    private async Task DelayForSocketResetAsync(Socket client)
    {
        await Task.Delay(100000);
        client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);
    }
}
